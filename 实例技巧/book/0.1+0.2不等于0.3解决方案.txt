Number.EPSILON=(function(){   //解决兼容性问题
        return Number.EPSILON?Number.EPSILON:Math.pow(2,-52);
      })();
//上面是一个自调用函数，当JS文件刚加载到内存中，就会去判断并返回一个结果，相比if(!Number.EPSILON){
  //   Number.EPSILON=Math.pow(2,-52);
  //}这种代码更节约性能，也更美观。
function numbersequal(a,b){
    return Math.abs(a-b)<Number.EPSILON;
  }
//接下来再判断   
    var a=0.1+0.2, b=0.3;
  console.log(numbersequal(a,b)); //这里就为true了

https://www.wengbi.com/thread_103789_1.html

这个问题引起的原因是因为IEEE规范的问题，
把0.1和0.2分别转化为二进制，是无限循环小数，但是IEEE规范里面是有限位的，此时截取导致精度不准确，故而0.1+0.2不等于0.3

十进制小数转二进制的方法是乘2取整，一直到小数位为0

进制转化是导致的精度缺失